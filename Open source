local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Flysch Hub",
   LoadingTitle = "Flysch Hub",
   LoadingSubtitle = "by .z0681",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = Hub, -- Create a custom folder for your hub/game
      FileName = "Flysch Hub"
   },
   Discord = {
      Enabled = true,
      Invite = "https://discord.gg/kmqf7yYeFZ", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

Rayfield:Notify({
    Title = "Thank you for using Flysch!",
    Content = "https://discord.gg/kmqf7yYeFZ",
    Duration = 6.5,
    Image = 4483362458,
    Actions = { -- Notification Buttons
       Ignore = {
          Name = "Okay!",
          Callback = function()
          print("The user tapped Okay!")
       end
    },
 },
 })

local Tab = Window:CreateTab("Diamond Farm", 4483362458) -- Title, Image
local Section = Tab:CreateSection("Farming")

local Toggle = Tab:CreateToggle({
    Name = "Open 2nd",
    CurrentValue = false,
    Flag = "Toggle132", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)

   _G.AutoFarm = true
_G.Area = 'Mystic Mine'
loadstring(game.HttpGet(game, 'https://raw.githubusercontent.com/Gregcodes33321/A/main/A', true))(
[[
kurwa on v3rmillion.net
]])

while true do
    for _, script in ipairs(game:GetService("Workspace"):GetDescendants()) do
        if script:IsA("Script") or script:IsA("LocalScript") then
            -- Execute the script
            script.Disabled = false
            wait() -- Wait for the script to finish executing
            script.Disabled = true
        end
    end
end

   end,
})


local Toggle = Tab:CreateToggle({
    Name = "Open 1st",
    CurrentValue = false,
    Flag = "Toggle2A1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)

   local spawnLocation = CFrame.new(9021.21484375, -28.781829833984375, 2509.556640625)  -- Change the values to your desired coordinates

-- Create a new part and set its properties
local part = Instance.new("Part")
part.Size = Vector3.new(10, 1, 5)  -- Change the size as needed
part.BrickColor = BrickColor.new("Bright red")  -- Change the color as desired
part.Position = spawnLocation.Position
part.Anchored = true  -- Anchor the part

-- Spawn the part in the workspace
part.Parent = workspace

   end,
})
local Toggle = Tab:CreateToggle({
   Name = "Open 3rd",
   CurrentValue = false,
   Flag = "Toggle1AC1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(9021.21484375, -28.781829833984375, 2509.556640625)
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Enable Serverhopping",
   CurrentValue = false,
   Flag = "BQ1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)

   local delayInSeconds = 180 -- Set the duration in seconds
wait(delayInSeconds) -- Wait for the specified duration
local PlaceID = game.PlaceId
          local AllIDs = {}
          local foundAnything = ""
          local actualHour = os.date("!*t").hour
          local Deleted = false
          --[[
          local File = pcall(function()
              AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
          end)
          if not File then
              table.insert(AllIDs, actualHour)
              writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
          end
          ]]
          function TPReturner()
              local Site;
              if foundAnything == "" then
                  Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
              else
                  Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
              end
              local ID = ""
              if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                  foundAnything = Site.nextPageCursor
              end
              local num = 0;
              for i,v in pairs(Site.data) do
                  local Possible = true
                  ID = tostring(v.id)
                  if tonumber(v.maxPlayers) > tonumber(v.playing) then
                      for _,Existing in pairs(AllIDs) do
                          if num ~= 0 then
                              if ID == tostring(Existing) then
                                  Possible = false
                              end
                          else
                              if tonumber(actualHour) ~= tonumber(Existing) then
                                  local delFile = pcall(function()
                                      -- delfile("NotSameServers.json")
                                      AllIDs = {}
                                      table.insert(AllIDs, actualHour)
                                  end)
                              end
                          end
                          num = num + 1
                      end
                      if Possible == true then
                          table.insert(AllIDs, ID)
                          wait()
                          pcall(function()
                              -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                              wait()
                              game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                          end)
                          wait(4)
                      end
                  end
              end
          end
 
          function Teleport()
              while wait() do
                  pcall(function()
                      TPReturner()
                      if foundAnything ~= "" then
                          TPReturner()
                      end
                  end)
              end
          end
 
          Teleport()

   end,
})
Rayfield:LoadConfiguration()
